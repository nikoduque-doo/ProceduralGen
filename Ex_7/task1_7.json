{"camera":{"position":[14.427814573643564,8.951881001913613,36.217426650110895],"target":[0,0,0],"nearClipping":0.1,"farClipping":1000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"mesh":"teapot","position":[0,-8,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW","blendEnable":true,"blendOperation":"FUNC_ADD","srcColorBlendFactor":"SRC_ALPHA","dstColorBlendFactor":"ONE_MINUS_SRC_ALPHA","srcAlphaBlendFactor":"SRC_ALPHA","dstAlphaBlendFactor":"ONE_MINUS_SRC_ALPHA","textureFiltering":"LINEAR_MIPMAP_LINEAR","maxAnisotropy":"1"},"passes":{"Model":{"base":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex position in object space coordinates\nin vec3 vertexPosition;\n// Surface normal at the vertex in object space coordinates\nin vec3 vertexNormal;\n// Texture coordinates at that vertex\nin vec2 vertexTextureCoordinates;\n\nout vec3 fragPos;\nout vec3 fragN;\nout vec3 camPos;\n\n// Model matrix\nuniform mat4 mMatrix;\n// View matrix\nuniform mat4 vMatrix;\n// Projection matrix\nuniform mat4 pMatrix;\n\n// Main program for each vertex\nvoid main() {\n  vec4 vertexCamSpace = vMatrix * mMatrix * vec4(vertexPosition, 1.0);\n  gl_Position = pMatrix * vertexCamSpace;\n\n  fragPos = (mMatrix * vec4(vertexPosition, 1.0)).xyz;\n  fragN = (transpose(inverse(mMatrix)) * vec4(vertexNormal, 0.0)).xyz;\n  camPos = (inverse(vMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;\n}"},"fragment":{"source":"#version 300 es\n\n// For better performance less precision\nprecision highp float;\n\nin vec3 fragPos;\nin vec3 fragN;\nin vec3 camPos;\n\nuniform vec3 lightDirection;\nuniform vec3 lightColor;\nuniform float kA; // 0.5\nuniform float kD; // 1.0\nuniform float kS; // 0.5\nuniform float s; // 20\nuniform float Ia; // 0.5\n\nout vec4 fragColor;\n\n// Main program for each fragment = pixel candidate\nvoid main() {\n  vec3 baseColor = vec3(0.4, 0.9, 1.0);\n\n  vec3 l = normalize(lightDirection);\n  vec3 n = normalize(fragN);\n  vec3 v = normalize(camPos - fragPos);\n\n  vec3 h = normalize(v + l);\n\n  float Id = clamp(dot(n, l), 0.0, 1.0);\n  float Is = pow(clamp(dot(n, h), 0.0, 1.0), s);\n  vec3 color = ((kA * Ia + kD * Id) * baseColor + (kS * Is) * vec3(1.0)) * lightColor;\n  fragColor = vec4(color, 1.0);\n}"}},"uniforms":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"},"lightDirection":{"value":[0,0,1]},"lightColor":{"value":[1,1,1]},"kA":{"value":[0.5]},"kD":{"value":[1]},"kS":{"value":[0.5]},"s":{"value":[80]},"Ia":{"value":[0.5]}}}}},"Quad":{"R2T":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex coordinates in object space for the render quad\nin vec3 vertexPosition;\n// Texture coordinate for this vertex and the render quad\nin vec2 vertexTextureCoordinates;\n\n// Texture coordinate needs to be passed on to the R2T fragment shader\nout vec2 fragmentTextureCoordinates;\n\n// Main program for each vertex of the render quad\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  fragmentTextureCoordinates = vertexTextureCoordinates;\n}"},"fragment":{"source":"#version 300 es\n\nprecision highp float;\n\n// A texture sampling unit, which is bound to the render quad texture buffer\nuniform sampler2D textureRendered;\n\n// Texture coordinates coming from the vertex shader, interpolated through the rasterizer\nin vec2 fragmentTextureCoordinates;\n\nuniform bool blur;\n\nout vec4 fragColor;\n\n// Main program for each fragment of the render quad\nvoid main() {\n\n    // Fixed radial blur distances\n    float s[12];\n    s[0] = -0.10568;\n    s[1] = -0.07568;\n    s[2] = -0.042158;\n    s[3] = -0.02458;\n    s[4] = -0.01987456;\n    s[5] = -0.0112458;\n    s[6] = 0.0112458;\n    s[7] = 0.01987456;\n    s[8] = 0.02458;\n    s[9] = 0.042158;\n    s[10] = 0.07568;\n    s[11] = 0.10568;\n\n    // fragmentTextureCoordinates is the current fragment coordinate\n    vec2 p = vec2(0.5, 0.5) - fragmentTextureCoordinates;\n    float d_max = float(textureSize(textureRendered, 0).x) / 750.0;\n\n    // Turn On or Off to check the effect of the radial blur\n    if (blur){\n        vec4 color = vec4(0.0);\n        for (int i = 0; i < 12; i++){\n            // For each coordinate in the textureRendered we grab the color\n            color += texture(textureRendered, \n                fragmentTextureCoordinates + p * (s[i] * d_max));\n        }\n        color = color / 12.0;\n\n        fragColor = color;\n    } else {\n        fragColor = texture(textureRendered, fragmentTextureCoordinates.st);\n    }\n    \n}"}},"uniforms":{"value":{"textureRendered":{"attachment":"Model/base Pass color"},"blur":{"value":[true]}}}}}},"output":{"image":"Quad/R2T Pass color"}}