{"camera":{"position":[4.840076158861588,18.071016922374728,35.355508908340745],"target":[0,0,0],"nearClipping":0.1,"farClipping":1000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"mesh":"teapot","position":[0,-8,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW","blendEnable":true,"blendOperation":"FUNC_ADD","srcColorBlendFactor":"SRC_ALPHA","dstColorBlendFactor":"ONE_MINUS_SRC_ALPHA","srcAlphaBlendFactor":"SRC_ALPHA","dstAlphaBlendFactor":"ONE_MINUS_SRC_ALPHA","textureFiltering":"LINEAR_MIPMAP_LINEAR","maxAnisotropy":"1"},"passes":{"Model":{"base":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex position in object space coordinates\nin vec3 vertexPosition;\n// Surface normal at the vertex in object space coordinates\nin vec3 vertexNormal;\n// Texture coordinates at that vertex\nin vec2 vertexTextureCoordinates;\n\n// Model matrix\nuniform mat4 mMatrix;\n// View matrix\nuniform mat4 vMatrix;\n// Projection matrix\nuniform mat4 pMatrix;\n\nuniform vec3 lightDirection;\nuniform vec3 lightColor;\nuniform float kA; // 0.5\nuniform float kD; // 1.0\nuniform float kS; // 0.5\nuniform float s; // 20\nuniform float Ia; // 0.5\n\nout vec4 color;\n\nfloat lambertian(float kD, vec3 l, vec3 n){\n  float Id = clamp(dot(n, l), 0.0, 1.0);\n  return Id;\n}\n\nfloat gouradPhong(float kS, float s, vec3 v, vec3 l, vec3 n){\n  vec3 r = normalize(2.0 * dot(n, l) * n - l);\n  float Is = pow(clamp(dot(r, v), 0.0, 1.0), s);\n  return Is;\n}\n\n// Main program for each vertex\nvoid main() {\n  vec4 vertexCamSpace = vMatrix * mMatrix * vec4(vertexPosition, 1.0);\n  gl_Position = pMatrix * vertexCamSpace;\n\n  vec3 baseColor = vec3(1.0, 0.0, 0.0);\n\n  vec3 fragPos = (mMatrix * vec4(vertexPosition, 1.0)).xyz;\n  vec3 fragN = (transpose(inverse(mMatrix)) * vec4(vertexNormal, 0.0)).xyz;\n  vec3 fragCamPos = (inverse(vMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;\n\n  vec3 l = normalize(lightDirection);\n  vec3 n = normalize(fragN);\n  vec3 v = normalize(fragCamPos - fragPos);\n  \n  float Id = lambertian(kD, l, n);\n  float Is = gouradPhong(kS, s, v, l, n);\n  color = vec4(\n    ( ( (kA * Ia + kD * Id) * baseColor + (kS * Is) ) * lightColor )\n    ,1.0);\n}"},"fragment":{"source":"#version 300 es\n\n// For better performance less precision\nprecision highp float;\n\nin vec4 color;\nout vec4 fragColor;\n\n// Main program for each fragment = pixel candidate\nvoid main() {\n  fragColor = color;\n}"}},"uniforms":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"},"lightDirection":{"value":[1,0,2]},"lightColor":{"value":[1,1,1]},"kA":{"value":[0.5]},"kD":{"value":[1]},"kS":{"value":[0.5]},"s":{"value":[20]},"Ia":{"value":[0.5]}}}}},"Quad":{"R2T":{"shaders":{"vertex":{"source":"#version 300 es\n\n// Vertex coordinates in object space for the render quad\nin vec3 vertexPosition;\n// Texture coordinate for this vertex and the render quad\nin vec2 vertexTextureCoordinates;\n\n// Texture coordinate needs to be passed on to the R2T fragment shader\nout vec2 fragmentTextureCoordinates;\n\n// Main program for each vertex of the render quad\nvoid main() {\n  gl_Position = vec4(vertexPosition, 1.0);\n  fragmentTextureCoordinates = vertexTextureCoordinates;\n}"},"fragment":{"source":"#version 300 es\n\nprecision highp float;\n\n// A texture sampling unit, which is bound to the render quad texture buffer\nuniform sampler2D textureRendered;\n\n// Texture coordinates coming from the vertex shader, interpolated through the rasterizer\nin vec2 fragmentTextureCoordinates;\nout vec4 fragColor;\n\n// Main program for each fragment of the render quad\nvoid main() {\n  fragColor = texture(textureRendered, fragmentTextureCoordinates.st);\n}"}},"uniforms":{"value":{"textureRendered":{"attachment":"Model/base Pass color"}}}}}},"output":{"image":"Quad/R2T Pass color"}}